name: CI

# Trigger the workflow on push or pull request, for master branch only.
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
#@@@  linux-gcc:
#@@@    name: Linux with gcc
#@@@    runs-on: ubuntu-latest
#@@@    steps:
#@@@    - uses: actions/checkout@master
#@@@    - name: install dependencies
#@@@      run: |
#@@@        sudo apt update
#@@@        sudo apt install dos2unix curl tar libpcsclite-dev libcurl4 libcurl4-openssl-dev dpkg-dev
#@@@    - name: build
#@@@      run: make -C src
#@@@    - name: test app
#@@@      run: src/Release-x86_64/app
#@@@    - name: test app_dll
#@@@      run: src/Release-x86_64/app_dll
#@@@
#@@@  linux-clang:
#@@@    name: Linux with clang
#@@@    runs-on: ubuntu-latest
#@@@    env:
#@@@      CC: clang++
#@@@      CXX: clang++
#@@@    steps:
#@@@    - uses: actions/checkout@master
#@@@    - name: install dependencies
#@@@      run: |
#@@@        sudo apt update
#@@@        sudo apt install dos2unix curl tar libpcsclite-dev libcurl4 libcurl4-openssl-dev dpkg-dev
#@@@    - name: build
#@@@      run: make -C src
#@@@    - name: test app
#@@@      run: src/Release-x86_64/app
#@@@    - name: test app_dll
#@@@      run: src/Release-x86_64/app_dll
#@@@
#@@@  macos-clang:
#@@@    name: macOS with clang
#@@@    runs-on: macos-latest
#@@@    env:
#@@@      CC: clang++
#@@@      CXX: clang++
#@@@    steps:
#@@@    - uses: actions/checkout@master
#@@@    - name: install dependencies
#@@@      run: |
#@@@        brew update
#@@@        brew install gnu-sed grep dos2unix pcsc-lite
#@@@    - name: check dependencies
#@@@      run: |
#@@@        pwd
#@@@        gsed --version
#@@@        ggrep --version
#@@@        dos2unix --version
#@@@    - name: build
#@@@      run: make -C src
#@@@    - name: test app
#@@@      run: src/Release-x86_64/app
#@@@    - name: test app_dll
#@@@      run: src/Release-x86_64/app_dll
#@@@
  windows-msvc:
    name: Windows with VC++
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master
#@@@    - name: install nsis
#@@@      run: |
#@@@        $NsisUrl = 'http://prdownloads.sourceforge.net/nsis/nsis-3.05-setup.exe?download'
#@@@        $ProgressPreference = 'SilentlyContinue'
#@@@        Invoke-WebRequest -UseBasicParsing -Uri $NsisUrl -UserAgent Download -OutFile nsis-setup.exe
#@@@        Start-Process -FilePath nsis-setup.exe -ArgumentList @("/S") -Wait
#@@@        Get-ChildItem "C:\Program Files (x86)\NSIS" | Format-Table
#@@@    - name: install dektec sdk
#@@@      run: |
#@@@        dektec/Download-Install-Dtapi.ps1 -NoPause
#@@@        Get-ChildItem "C:\Program Files (x86)\DekTec" | Format-Table
    - name: build 64-bit
      run: src/Build.ps1 x64
#@@@    - name: build 32-bit
#@@@      run: src/Build.ps1 Win32
    - name: test app 64-bit
      run: src/Release-x64/app.exe
#@@@    - name: test app 32-bit
#@@@      run: src/Release-Win32/app.exe
    - name: test app_dll 64-bit
      run: src/Release-x64/app_dll.exe
#@@@    - name: test app_dll 32-bit
#@@@      run: src/Release-Win32/app_dll.exe
#@@@    - name: test tsduck exec
#@@@      run: tsduck/tsversion.exe --version=all
    - name: test setting env
      run:
          $env:FOO = "Foo bar"
          Write-Output "FOO= $($env:FOO)"
    - name: test env persistence across steps
      run:
          Write-Output "FOO= $($env:FOO)"
    - name: Upload app
      uses: actions/upload-artifact@master
      with:
        name: app ${{ env.FOO }}
        path: src/Release-x64/app.exe
